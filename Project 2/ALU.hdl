// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // if (zx == 1) set x = 0        // 16-bit constant - Set to 16 bit output called xout
   Mux16(a = x, b = false, sel = zx, out = xout);
   // if (nx == 1) set x = !x       // bitwise not
   Not16(in = xout, out = Notx);
   Mux16(a = xout, b = Notx, sel = nx, out = xout1);
   // WORKS UP TO HERE
   // if (zy == 1) set y = 0        // 16-bit constant
   Mux16(a = y, b = false, sel = zy, out = yout);
   // if (ny == 1) set y = !y       // bitwise not
   Not16(in = yout, out = Noty);
   Mux16(a = yout, b = Noty, sel = ny, out = yout1);
   // if (f == 1)  set out = x + y  // integer 2's complement addition
   // if (f == 0)  set out = x & y  // bitwise and
   Add16(a = xout1, b = yout1, out = aAddb);
   And16(a = xout1, b = yout1, out = aAndb);
   Mux16(a = aAndb, b = aAddb, sel = f, out = out0);
   // if (no == 1) set out = !out   // bitwise not
   Not16(in = out0, out = Notout);
   //out2 is not a pin in Mux16
   //Mux16(a = out0, b = Notout, sel = no, out = out);
   Mux16(a = out0, b = Notout, sel = no, out = out, out[0..7] = outLSB, out[8..15] = outMSB, out[15] = ng);

   // if (out == 0) set zr = 1
   //sub - bus of an internal node may not be used
   Or8Way(in = outLSB, out = LSBout);
   Or8Way(in = outMSB, out = MSBout);
   Or(a = LSBout, b = MSBout, out = outSetNotZero);
   Mux(a = true, b = false, sel = outSetNotZero, out = zr);
   // if (out < 0) set ng = 1
   //out(16) and ng (1) have different bus widths
   //Mux16(a = true, b = false, sel = ngx, out = ng);
}
